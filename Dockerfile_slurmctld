FROM rockylinux:9.3

# # Install basic tools for compiling
# RUN yum groupinstall -y 'Development Tools'
# # Ensure EPEL repository is available
# RUN yum install -y epel-release
# # Install RPM packages for dependencies
# RUN yum install -y \
#     libseccomp-devel \
#     squashfs-tools \
#     squashfuse \
#     fuse-overlayfs \
#     fakeroot \
#     /usr/*bin/fuse2fs \
#     cryptsetup \
#     wget git
# # Install GO
# RUN export GOVERSION=1.19.6 OS=linux ARCH=amd64 \
#     && wget -O /tmp/go${GOVERSION}.${OS}-${ARCH}.tar.gz \
#     https://dl.google.com/go/go${GOVERSION}.${OS}-${ARCH}.tar.gz \
#     && tar -C /usr/local -xzf /tmp/go${GOVERSION}.${OS}-${ARCH}.tar.gz
# ENV PATH="$PATH:/usr/local/go/bin"
# # Install Apptainer
# ARG APPTAINER_COMMITISH="main"
# ARG MCONFIG_OPTIONS="--with-suid"
# WORKDIR $GOPATH/src/github.com/apptainer
# RUN git clone https://github.com/apptainer/apptainer.git \
#     && cd apptainer \
#     && git checkout "$APPTAINER_COMMITISH" \
#     && ./mconfig $MCONFIG_OPTIONS -p /usr/local/apptainer \
#     && cd builddir \
#     && make \
#     && make install

# ENV PATH="/usr/local/apptainer/bin:$PATH" \
#     APPTAINER_TMPDIR="/tmp-apptainer"
# RUN yum -y install ca-certificates libseccomp squashfs-tools \
#     && mkdir -p $APPTAINER_TMPDIR \
#     && rm -rf /tmp/*

LABEL org.opencontainers.image.source="https://github.com/giovtorres/slurm-docker-cluster" \
      org.opencontainers.image.title="slurm-docker-cluster" \
      org.opencontainers.image.description="Slurm Docker cluster on Rocky Linux 8" \
      org.label-schema.docker.cmd="docker-compose up -d" \
      maintainer="Giovanni Torres"

ARG SLURM_TAG=slurm-21-08-6-1
ARG GOSU_VERSION=1.11

RUN set -ex \
    && dnf makecache \
    && dnf -y update \
    && dnf -y install dnf-plugins-core \
    && dnf config-manager --set-enabled crb \
    && dnf -y install \
       wget \
       bzip2 \
       perl \
       gcc \
       gcc-c++\
       git \
       gnupg \
       make \
       munge \
       munge-devel \
       python3-devel \
       python3-pip \
       python3 \
       mariadb-server \
       mariadb-devel \
       psmisc \
       bash-completion \
       vim-enhanced \
       http-parser-devel \
       json-c-devel \
    && dnf clean all \
    && rm -rf /var/cache/dnf

RUN alternatives --install /usr/bin/python python /usr/bin/python3.10 1

RUN pip3 install Cython nose

RUN set -ex \
    && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64" \
    && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64.asc" \
    && export GNUPGHOME="$(mktemp -d)" \
    && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -rf "${GNUPGHOME}" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true

RUN set -x \
    && git clone -b ${SLURM_TAG} --single-branch --depth=1 https://github.com/SchedMD/slurm.git \
    && pushd slurm \
    && ./configure --enable-debug --prefix=/usr --sysconfdir=/etc/slurm \
        --with-mysql_config=/usr/bin  --libdir=/usr/lib64 \
    && make install \
    && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
    && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
    && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
    && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
    && popd \
    && rm -rf slurm \
    && groupadd -r --gid=990 slurm \
    && useradd -r -g slurm --uid=990 slurm \
    && mkdir /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/run/slurmdbd \
        /var/lib/slurmd \
        /var/log/slurm \
        /data \
    && touch /var/lib/slurmd/node_state \
        /var/lib/slurmd/front_end_state \
        /var/lib/slurmd/job_state \
        /var/lib/slurmd/resv_state \
        /var/lib/slurmd/trigger_state \
        /var/lib/slurmd/assoc_mgr_state \
        /var/lib/slurmd/assoc_usage \
        /var/lib/slurmd/qos_usage \
        /var/lib/slurmd/fed_mgr_state \
    && chown -R slurm:slurm /var/*/slurm* \
    && /sbin/create-munge-key \
    && chown -R slurm:slurm /etc/munge/

COPY slurm.conf /etc/slurm/slurm.conf
COPY slurmdbd.conf /etc/slurm/slurmdbd.conf
RUN set -x \
    && chown slurm:slurm /etc/slurm/slurmdbd.conf \
    && chmod 600 /etc/slurm/slurmdbd.conf

COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

## ------- Setup SSH ------
RUN dnf -y update && dnf install  openssh-server initscripts sudo -y
# Create a user “sshuser” and group “sshgroup”
# RUN groupadd sshgroup && useradd -ms /bin/bash -g sshgroup sshuser
# Create sshuser directory in home
RUN mkdir -p /home/slurm/.ssh
# Copy the ssh public key in the authorized_keys file. The idkey.pub below is a public key file you get from ssh-keygen. They are under ~/.ssh directory by default.
COPY id_rsa.pub /home/slurm/.ssh/authorized_keys
# Copy a Bashrc to jump to (shared) data folder! 
COPY .bashrc .bash_profile /home/slurm/
# change ownership of the key file. 
RUN chown slurm:slurm /home/slurm/.ssh/authorized_keys && chmod 600 /home/slurm/.ssh/authorized_keys
RUN chown slurm:slurm /home/slurm/.bashrc
RUN chown slurm:slurm /home/slurm/.bash_profile
RUN chown slurm:slurm /home/slurm
# Start SSH service
# RUN service ssh start
# RUN /etc/init.d/sshd start
RUN /usr/bin/ssh-keygen -A

# ------- Install Singularity/Apptainer -------
RUN dnf install -y epel-release \
    && dnf install -y apptainer
RUN dnf install -y p7zip p7zip-plugins

# Expose docker port 22 for SSH
EXPOSE 22
CMD ["/usr/sbin/sshd","-D"]
# CMD ["slurmdbd"]
